// üìò Rejeitando com dados

// O reject() tamb√©m pode passar alguns dados para o callback .catch(). Por exemplo:

// A fun√ß√£o executora de promise (a fun√ß√£o passada para a chamada new Promise(...)), na verdade, recebe dois argumentos. 
// O primeiro chamamos de resolver e vimos anteriormente.
//  O segundo √© a fun√ß√£o que voc√™ pode chamar para mover a promise de pending para rejected.
//  Chamaremos este de reject. Confira:

const sempreFalha = () => {
    return new Promise((resolve, reject) => {
        reject("Falhou. Essa √© a √∫nica coisa que fa√ßo.")
    });
}

sempreFalha()
  .then(() => {
    // nunca ser√° chamado
  })
  .catch(data => {
    console.error(data); // "Falhou. Essa √© a √∫nica coisa que fa√ßo."
  });